
!pip install tensorflow

Import necessary libraries

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
Load and preprocess the MNIST dataset


(x_train, y_train), (x_test, y_test) = datasets.mnist.load_data()

# Normalize pixel values to be between 0 and 1
x_train = x_train / 255.0
x_test = x_test / 255.0

# Reshape the images to include the color channel
x_train = x_train.reshape((x_train.shape[0], 28, 28, 1))
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1))

x_train.shape , x_test.shape , y_train.shape , y_test.shape
((60000, 28, 28, 1), (10000, 28, 28, 1), (60000,), (10000,))

def plot_input_img(i):
    plt.imshow(x_train[i] , cmap = 'binary')
    plt.title(y_train[i])
    plt.show()

[ ]
for i in range(10):
    plot_input_img(i)

Define the CNN model

[ ]
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(10, activation='softmax'))
/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)

[ ]
model.summary()


Compile the model

[ ]
 model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

Train the model

[ ]
train = model.fit(x_train, y_train, epochs=2, batch_size=32,
                    validation_data=(x_test, y_test))



[ ]
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

# Plot training & validation accuracy values
plt.plot(train.history['accuracy'])
plt.plot(train.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(train.history['loss'])
plt.plot(train.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()

Prediction on New Image

[ ]
from google.colab import files
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

# Function to preprocess the uploaded image
def preprocess_image(img_path):
    img = image.load_img(img_path, color_mode='grayscale', target_size=(28, 28))
    img = image.img_to_array(img)
    img = img.reshape(1, 28, 28, 1).astype('float32') / 255
    return img

# Upload a new image
uploaded = files.upload()

for fn in uploaded.keys():
    # Preprocess the image
    img = preprocess_image(fn)

    # Predict the digit
    prediction = model.predict(img)
    predicted_digit = np.argmax(prediction)

    print(f'The model predicts this digit is: {predicted_digit}')

    # Display the image
    plt.imshow(img.reshape(28, 28), cmap='gray')
    plt.title(f'Predicted Digit: {predicted_digit}')
    plt.show()


CONCLUSION:
1.The MNIST dataset consists of 60,000 training images and 10,000 testing images of handwritten digits (0-9), each image being 28x28 pixels.

2.The notebook might present results in terms of accuracy achieved on the test set, along with visualizations of correctly and incorrectly classified digits.

Colab paid products - Cancel contracts here
